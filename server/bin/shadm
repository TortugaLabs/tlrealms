#!/bin/sh
#
#++
# = SHADM(8)
# :Revision: 1.0
#
# == NAME
#
# shadm - shadow admin
#
# == SYNOPSIS
#
# *shadm* *subcmd* _[opts]_ _principal_
#
# == DESCRIPTION
#
# *shadm* is used to manage user and groups in the TLR system.  It is
# equivalent to the shadow password utilities in a normal UNIX/LINUX
# system.
#
# == USER MANAGEMENT SUBCOMMANDS
#
# === useradd
#
# Add a new user to the system.
#
# Usage:
#
#     useradd [options] LOGIN
#
# Options:
#
# * --comment='GECOS field' -- set the contents of the comment field
# * --homedir=dir -- sets the home directory
# * --groups=grp,grp,grp -- list of secondary groups
# * --system -- creating a realm system account.
# * --uid=num -- assign the uid when creating.
# * --shell=path -- user's preferred shell
#
# === userdel
#
# Deletes an user from the system.
#
# Usage:
#
#     userdel LOGIN
#
# === usermod
#
# Modifiy user account
#
# Usage:
#
#      usermod [options] LOGIN
#
# Options:
#
# * --comment='GECOS field' -- set the contents of the comment field
# * --homedir=dir -- sets the home directory
# * --shell=path -- user's preferred shell
#
# === passwd
#
# Changes user passwords.
#
# Usage:
#
#      passwd [options] LOGIN
#
# Options:
#
# * --lock : lock the password
# * --unlock : unlocks the password
# * --delete : removes the password
#
# If no option is specified this command will prompt the user for a new
# password.
#
# === chage
#
# Changes user password expiry information.
#
# * --lastday=YYYY-MM-DD -- last time password was changed
# * --expire -- expires password (user will be prompted for new password)
# * --expire=YYYY-MM-DD -- set account expiration date
# * --inactive=days -- number of days of inactivity after password expires
# * --mindays=days -- Minimum number of days between password changes
# * --warndays=days -- Days of warning before password expires
# * --maxdays=days -- Maximum number of days between password changes
# * -l -- list details for user
#
# === status
#
# Lists user password status information
#
# == GROUP MANAGEMENT SUBCOMMANDS
#
# === group
#
# List group or a single group information
#
# Usage:
#
#    group [GROUP]
#
# === groupadd
#
# Add a new group to the system
#
# Usage:
#
#     groupadd [options] GROUP
#
# Options:
#
# * --gid=GID -- Assign this group id
# * --system -- This is a system realm group
#
# === groupmems
#
# Change group membership
#
# Usage:
#
#    groupmems [op] GROUP
#
# Options:
#
# * --add=LOGIN -- Adds user to GROUP
# * --del=LOGIN -- Deletes user from GROUP
# * --list -- List GROUP members
#
# === groupdel
#
# Delete group
#
# Usage:
#
#      groupdel GROUP
#
# === groupmod
#
# Modify group details
#
# Usage:
#
#     groupmod [options] GROUP
#
# Options:
#
# * --gid=GID -- change group id
# * --new-name=NAME - change group name
#
#--
lib=/usr/localpkgs/tlr/lib
export PATH=$PATH:/sbin:/usr/sbin

. $lib/config.sh
. $lib/error.sh
. $lib/flock.sh
. $lib/logmsg.sh
. $lib/sysupd.sh
. $lib/shalib.sh

op="$1"
[ -z "$op" ] && fatal "No sub command specified"
shift

do_sysupd=false

define_user_defaults() {
  basedir=/home
  uid_min=2000		# normal realm users
  uid_max=9999
  sgid_min=10000	# system realm groups
  sgid_max=10999
  gid_min=11000		# normal realm groups
  gid_max=11999
  sid_min=500		# System realm users
  sid_max=999
  lid_min=100		# System local users
  lid_max=499
  user_shell=/bin/sh
}

do_useradd() {
  define_user_defaults
  comment=""
  homedir=""
  groups=""
  sysacct=false
  n_uid=

  while [ $# -gt 0 ]
  do
    case "$1" in
      --comment=*)
	comment=${1#--comment=}
	;;
      --homedir=*)
	homedir=${1#--homedir=}
	;;
      --groups=*)
	groups=${1#--groups=}
	;;
      -r|--system)
	sysacct=true
	;;
      --uid=*)
	n_uid=${1#--uid=}
	;;
      --shell=*)
	user_shell=${1#--shell=}
	;;
      -*)
	fatal "Invalid option $1"
	;;
      *)
	loginname=$1
	break
	;;
    esac
    shift
  done

  [ -z "$loginname" ] && fatal "No login name specified"
  [ -z "$homedir" ] && homedir="$basedir/$loginname"
  if [ -z "$n_uid" ] ; then
    # Pick uid
    if $sysacct ; then
      n_uid=$(pick_id $dbdir/passwd 3 $sid_min $sid_max)
    else
      n_uid=$(pick_id $dbdir/passwd 3 $uid_min $uid_max)
    fi
    [ -z "$n_uid" ] && fatal "No available UID"
  else
    local c=$(get_item $dbdir/passwd 3 $n_uid)
    [ -n "$c" ] && fatal "$n_uid: already in use ($c)"
  fi
  local c=$(get_item $dbdir/passwd 1 $loginname)
  [ -n "$c" ] && fatal "$loginname: name already exists ($c)"

  set_line $dbdir/htdigest 1 $loginname \
      "$loginname:$htrealm:"
  set_line $dbdir/passwd 1 $loginname \
      "$loginname:x:$n_uid:$n_uid:$comment:$homedir:$user_shell"
  set_line $dbdir/pwds 1 $loginname \
      "$loginname:"
  set_line $dbdir/shadow 1 $loginname \
      "$loginname::0:0:99999:7:::"
  adm krb adduser $loginname

  if [ -n "$groups" ] ; then
    local g
    for g in $(echo "$groups" | tr , ' ')
    do
      do_groupmems --add=$loginname $g
    done
  fi
  do_sysupd=true

  echo "User $loginname created"
  echo "Set password with:"
  echo "	chpwd $loginname"
}

do_userdel() {
  [ $# -ne 1 ] && fatal "Usage: userdel USER"
  local loginname="$1"
  local c=$(get_item $dbdir/passwd 1 $loginname)
  if [ -n "$c" ] ; then
    set_line $dbdir/htdigest 1 $loginname
    set_line $dbdir/passwd 1 $loginname
    set_line $dbdir/pwds 1 $loginname
    set_line $dbdir/shadow 1 $loginname
    adm krb deluser $loginname
    # Remove the user for any member groups
    local g
    for g in $(grep "$loginname" $dbdir/group | cut -d: -f1)
    do
      do_groupmems --del=$loginname $g
    done
    do_sysupd=true
  else
    echo "$loginname: does not exists" 1>&2
  fi
}

do_usermod() {
  local \
      set_comment \
      set_home \
      set_shell

  while [ $# -gt 0 ]
  do
    case "$1" in
      --comment=*)
	set_comment=${1#--comment=}
	;;
      --homedir=*)
	set_home=${1#--homedir=}
	;;
      --shell=*)
	set_shell=${1#--shell=}
	;;
      -*)
	fatal "Invalid option $1"
	;;
      *)
	loginname="$1"
	break
    esac
    shift
  done

  [ -z "$loginname"  ] && fatal "No login name specified"
  local c=$(get_item $dbdir/passwd 1 $loginname)
  [ -z "$c" ] && fatal "Unknown user $loginname"
  local n="$c"

  [ -n "$set_comment" ] && n="$(set_litem "$n" 5 "$set_comment")"
  [ -n "$set_home" ] && n="$(set_litem "$n" 6 "$set_home")"
  [ -n "$set_shell" ] && n="$(set_litem "$n" 7 "$set_shell")"

  if [ x"$n" != x"$c" ] ; then
    set_line $dbdir/passwd 1 $loginname "$n"
    do_sysupd=true
  fi
}

do_passwd() {
  local \
      set_pwd

  while [ $# -gt 0 ]
  do
    case "$1" in
      --lock)
	[ -n "$set_pwd" ] && fatal "invalid usage"
	set_pwd=lock
	;;
      --unlock)
	[ -n "$set_pwd" ] && fatal "invalid usage"
	set_pwd=unlock
	;;
      --delete)
	[ -n "$set_pwd" ] && fatal "invalid usage"
	set_pwd=delete
	;;
      -*)
	fatal "Invalid option $1"
	;;
      *)
	loginname="$1"
	break
    esac
    shift
  done

  [ -z "$loginname" ] && fatal "No login specified"
  local c=$(get_item $dbdir/pwds 1 $loginname)
  [ -z "$c" ] && fatal "Unknown user $loginname"
  local n="$c"
  if [ -z "$set_pwd" ] ; then
    exec chpwd "$loginname"
  fi

  case "$set_pwd" in
    lock)
      local o=$(get_litem "$n" 2)
      [ x"$(expr substr "$o" 1 1)" != x"!" ] && n="$(set_litem "$n" 2 "!$o")"
      ;;
    unlock)
      local o=$(get_litem "$n" 2)
      if [ x"$(expr substr "$o" 1 1)" = x"!" ] ; then
	o="$(expr substr "$o" 2 $(expr length "$o"))"
	n="$(set_litem "$n" 2 "$o")"
      fi
      ;;
    delete)
      n="$(set_litem "$n" 2 "")"
      ;;
    *)
      fatal "Internal error"
      ;;
  esac

  if [ x"$n" != x"$c" ] ; then
    set_line $dbdir/pwds 1 $loginname "$n"
    do_sysupd=true
  fi
}


do_chage() {
  local \
      set_lastday \
      set_expire \
      set_inactive \
      set_mindays \
      set_maxdays \
      set_warndays \
      list=false

  while [ $# -gt 0 ]
  do
    case "$1" in
      --lastday=*)
	set_lastday=${1#--lastday=}
	;;
      --expire)
	set_expire=0
	;;
      --expire=*)
	set_expire=${1#--expire=}
	;;
      --inactive=*)
	set_inactive=${1#--inactive=}
	;;
      --mindays=*)
	set_mindays=${1#--mindays=}
	;;
      --warndays=*)
	set_warndays=${1#--warndays=}
	;;
      --maxdays=*)
	set_maxdays=${1#--maxdays=}
	;;
      -l)
	# Show info
	list=true
	;;
      -*)
	fatal "bad option $1"
	;;
      *)
	loginname="$1"
	break
    esac
    shift
  done

  [ -z "$loginname" ] && fatal "No login specified"
  local c=$(get_item $dbdir/shadow 1 $loginname)
  [ -z "$c" ] && fatal "Unknown user $loginname"
  if $list ; then
    # Show info
    local z

    echo "Last password change:" $(format_date $(get_litem "$c" 3))
    z=$(get_litem "$c" 5)
    if [ -z "$z" ] ; then
      z="never"
    elif [ "$z" = 99999 ] ; then
      z="never"
    else
      z=$(expr $(get_litem "$c" 3) + $z)
      z=$(format_date $z)
    fi
    echo "Password expires:" $z

    z=$(get_litem "$c" 7)
    if [ -z "$z" ] ; then
      z="never"
    else
      z=$(expr $(get_litem "$c" 3) + $z)
      z=$(format_date $z)
    fi
    echo "Password inactive:" $z

    z=$(get_litem "$c" 8)
    if [ -z "$z" ] ; then
      z="never"
    else
      z=$(format_date $z)
    fi
    echo "Account expires:" $z
    echo "Minimum number of days between password changes:" $(get_litem "$c" 4)
    echo "Maximum number of days between password changes:" $(get_litem "$c" 5)
    echo "Days of warning before password expires:"  $(get_litem "$c" 6)
    exit
  fi

  local n="$c"

  # Manipulate shadow fields...
  if [ -n "$set_expire" ] ; then
    if [ $set_expire = 0 ] ; then
      n="$(set_litem "$n" 3 0)"
    else
      set_expire=$(parse_date "$set_expire")
      [ -z "$set_expire" ] && fatal "expire: Specify date in YYYY-MM-DD format"
      n="$(set_litem "$n" 8 "$set_expire")"
    fi
  fi
  if [ -n "$set_lastday" ] ; then
    set_lastday=$(parse_date "$set_lastday")
    [ -z "$set_lastday" ] && fatal "lastday: Specify date in YYYY-MM-DD format"
    n="$(set_litem "$n" 3 "$set_lastday")"
  fi
  [ -n "$set_inactive" ] && n="$(set_litem "$n" 7 $set_inactive)"
  [ -n "$set_mindays" ] && n="$(set_litem "$n" 4 $set_mindays)"
  [ -n "$set_maxdays" ] && n="$(set_litem "$n" 5 $set_maxdays)"
  [ -n "$set_warndays" ] && n="$(set_litem "$n" 6 $set_warndays)"

  if [ x"$n" != x"$c" ] ; then
    set_line $dbdir/shadow 1 $loginname "$n"
    do_sysupd=true
  fi
}


do_group() {
  if [ $# -eq 1 ] ; then
    local c=$(get_item $dbdir/group 1 "$1")
    [ -z "$c" ] && return 1
    local c_grp=$(get_litem "$c" 1)
    local c_gid=$(get_litem "$c" 3)
    local c_usrs=$(get_litem "$c" 4)
    echo "group:$c_grp"
    echo "gid:$c_gid"
    echo "members:$c_usrs"
  elif [ $# -eq 0 ] ; then
    cat $dbdir/group
  else
    fatal "Usage: group [GROUP]"
  fi
}

do_groupdel() {
  [ $# -ne 1 ] && fatal "Usage: groupdel GROUP"
  local groupname="$1"
  local c=$(get_item $dbdir/group 1 $groupname)
  if [ -n "$c" ] ; then
    set_line $dbdir/group 1 $groupname
    do_sysupd=true
  else
    echo "$groupname: does not exists" 1>&2
  fi
}

do_groupadd() {
  define_user_defaults
  n_gid=
  sysacct=false

  while [ $# -gt 0 ]
  do
    case "$1" in
      --gid=*)
	n_gid=${1#--gid=}
	;;
      --system)
	sysacct=true
	;;
      -*)
	fatal "Invalid option $1"
	;;
      *)
	groupname=$1
	break;
	;;
    esac
    shift
  done

  [ -z "$groupname" ] && fatal "No group name specified"
  if [ -z "$n_gid" ] ; then
    # pick gid
    if $sysacct ; then
      n_gid=$(pick_id $dbdir/group 3 $sgid_min $sgid_max)
    else
      n_gid=$(pick_id $dbdir/group 3 $gid_min $gid_max)
    fi
    [ -z "$n_gid" ] && fatal "No available GID"
  else
    local c=$(get_item $dbdir/group 3 $n_gid)
    [ -n "$c" ] && fatal "$n_gid: already in use ($c)"
  fi
  local c=$(get_item $dbdir/group 1 $groupname)
  [ -n "$c" ] && fatal "$groupname: name already exists ($c)"

  set_line $dbdir/group 1 $groupname "$groupname:x:$n_gid:"
  do_sysupd=true
}


do_groupmems() {
  local groupname=""
  local op=""
  local username=""

  while [ $# -gt 0 ]
  do
    case "$1" in
      --add=*)
	[ -n "$op" ] && fatal "Ambiguous command"
	op=add
	username=${1#--add=}
	;;
      --del=*)
	[ -n "$op" ] && fatal "Ambiguous command"
	op=del
	username=${1#--del=}
	;;
      --list)
	[ -n "$op" ] && fatal "Ambiguous command"
	op=list
	;;
      -*)
	fatal "Invalid option $1"
	;;
      *)
	groupname=$1
	break
	;;
    esac
    shift
  done
  [ -z "$groupname" ] && fatal "No groupname specified"
  [ -z "$op" ] && fatal "No operation specified"
  local n=$(get_item $dbdir/group 1  $groupname)
  [ -z "$n" ] && fatal "Group $groupname does not exist"

  case "$op" in
      list)
	get_litem "$n" 4 | tr , '\n'
	exit
	;;
      add)
	local lst=$(get_litem "$n" 4 | tr , '\n' ; echo $username)
	lst=$(echo "$lst" | sort -u | tr '\n' , | sed -e 's/^,//' -e 's/,$//')
	n=$(set_litem "$n" 4 $lst)
	;;
      del)
	local lst=$(get_litem "$n" 4 | tr , '\n' | awk '$1 != "'$username'" {print}' )
	lst=$(echo "$lst" | tr '\n' , | sed -e 's/^,//' -e 's/,$//')
	n=$(set_litem "$n" 4 $lst)
	;;
      *)
	fatal "Unknown op"
	;;
  esac

  set_line $dbdir/group 1 $groupname "$n"
  do_sysupd=true
}

do_groupmod() {
  local \
      set_gid \
      set_name

  while [ $# -gt 0 ]
  do
    case "$1" in
      --gid=*)
	set_gid=${1#--gid=}
	;;
      --new-name=*)
	set_name=${1#--new-name=}
	;;
      -*)
	fatal "Invalid option: $1"
	;;
      *)
	groupname="$1"
	break
	;;
    esac
    shift
  done

  [ -z "$groupname"  ] && fatal "No group name specified"
  local c=$(get_item $dbdir/group 1 $groupname)
  [ -z "$c" ] && fatal "Unknown group $groupname"
  local n="$c"

  [ -n "$set_gid" ] && n="$(set_litem "$n" 3 "$set_gid")"
  # This can only be last!!!!
  [ -n "$set_name" ] && n="$(set_litem "$n" 1 "$set_name")"

  if [ x"$n" != x"$c" ] ; then
    set_line $dbdir/group 1 $groupname "$n"
    do_sysupd=true
  fi
}

do_status() {
  exec <$dbdir/shadow
  while read ln
  do
    user=$(get_litem "$ln" 1)
    lastch=$(get_litem "$ln" 3)
    if [ $lastch -eq 0 ] ; then
      lastch='*expired*'
    else
      lastch=$(format_date $lastch)
    fi
    min_age=$(get_litem "$ln" 4)
    max_age=$(get_litem "$ln" 5)
    warndays=$(get_litem "$ln" 6)
    inactive=$(get_litem "$ln" 7)

    echo $user $lastch $min_age $max_age $warndays $inactive
  done
}

case "$op" in
  useradd)
    do_useradd "$@"
    ;;
  userdel)
    do_userdel "$@"
    ;;
  usermod)
    do_usermod "$@"
    ;;
  passwd)
    do_passwd "$@"
    ;;
  chage)
    do_chage "$@"
    ;;
  status)
    do_status "$@"
    ;;
  groupadd)
    do_groupadd "$@"
    ;;
  groupmems)
    do_groupmems "$@"
    ;;
  group)
    do_group "$@" || exit 1
    ;;
  groupdel)
    do_groupdel "$@"
    ;;
 groupmod)
    do_groupmod "$@"
    ;;
  help)
    sed -n '/^#++/,/^#--/p' $0 | grep '^#' | sed -e 's/#//' | (
      if [ -t 1 ] ; then
	exec less
      else
	exec cat
      fi
    )
    ;;
  *)
    fatal "$op: unknown command"
    ;;
esac

if $do_sysupd ; then
  if [ -n "$SSH_CONNECTION" ] ; then
    remhost=$(echo $SSH_CONNECTION | ( read a b ; echo $a))
  else
    remhost="*local*"
  fi
  logmsg "shadm $*"
  sysupd $dbdir $etcdir
fi
