#!/bin/sh
#
# HOST KEY Force command
#
# command="<script> hostkeyname" <keyopts> SSH_KEY_STRINGS
#
lib=/usr/localpkgs/tlr/lib
export PATH=$PATH:/sbin:/usr/sbin

. $lib/config.sh
. $lib/error.sh
. $lib/flock.sh
. $lib/logmsg.sh
. $lib/sysupd.sh
. $lib/sync.sh

if [ -n "$1" ] ; then
  remhost="$1"
  shift
else
  remhost="_unknown_"
fi

do_chpwd() {
  if chpwd ; then
    logmsg "password changed"
    sysupd $dbdir $etcdir
    echo 'OK'
  else
    echo 'FAIL'
  fi
}

do_sync() {
  local qserial="$1" ; shift
  [ -z "$qserial" ] && qserial=0
  local cserial="$(serial read $dbdir)"

  # No changes in serial number, skip ...
  [ x"$qserial" = x"$cserial" ] && exit 0

  sync_send $dbdir
  logmsg "synced db"
}

do_princ() {
  exec 3>&1 >&2
  local princ="$1"
  local kdir=$(mktemp -d)
  trap "rm -rf $kdir" EXIT
  kadmin.local -q "addprinc -randkey $princ"
  kadmin.local -q "ktadd -k $kdir/keytab $princ"
  cat $kdir/keytab 1>&3
  rm -rf $kdir/keytab
}


dispatch() {
  [ -z "$1" ] && fatal "No remote command specified"
  local op="$1" ; shift

  case "$op" in
    chpwd)
      with_lock -x do_chpwd "$@"
      ;;
    sync)
      with_lock -s do_sync "$@"
      ;;
    addprinc)
      do_princ "$@"
      ;;
    *)
      logmsg "Invalid command $*"
      fatal "$op: Unknown remote command"
      ;;
  esac
}

#: $SSH_CONNECTION
#COMMAND_LINE="$*"
dispatch $SSH_ORIGINAL_COMMAND
