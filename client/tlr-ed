#!/usr/bin/perl -w
#
use strict;
use warnings;
use File::Temp qw(tempdir);
use IPC::Open2;
use POSIX ':sys_wait_h';
use Cwd;
use FindBin;
use lib "$FindBin::Bin";
use TLR::proto;
use TLR::fsutil;

my $dsrv;
my $verbose = 1;

my $cfgfile = $ENV{TLRCFG} ? $ENV{TLRCFG} : '/etc/tlr.cfg';
if (my $cfg = read_cfg($cfgfile,'ed')) {
    eval $cfg;
    die "$@\n" if ($@);
}

while (scalar(@ARGV)) {
    if ($ARGV[0] eq '-s' || $ARGV[0] eq '--server') {
	$dsrv = $ARGV[1];
	shift ; shift ;
    } elsif ($ARGV[0] =~ s/^-s//) {
	$dsrv = $ARGV[0];
	shift;
    } elsif ($ARGV[0] =~ s/^--server=//) {
	$dsrv = $ARGV[0];
	shift;
	die "missing argument for $ARGV[0] option\n";
    } elsif ($ARGV[0] eq '-v' || $ARGV[0] eq '--verbose') {
	shift;
	$verbose = 1;
    } elsif ($ARGV[0] eq '-q' || $ARGV[0] eq '--quiet') {
	shift;
	$verbose = 0;
    } else {
	last;
    }
}

die "No domain server specified" unless ($dsrv);

my $tmdir = tempdir(CLEANUP=>1);
print STDERR "tmpdir=$tmdir\n" if ($verbose);
$tmdir =~ s/\/+$//;
$tmdir .= '/';

# Establish an IPC channel
my $pid = open2(my $fo,my $fi,qw(ssh -l root),$dsrv,qw(adm shell));
# my $pid = open2(my $fo,my $fi,"$FindBin::Bin/../server/adm","shell");
if ($pid) {
    my $oh = select($fi);
    $| = 1;
    select($oh);
} else {
    die "open2: $!\n";
}
print $fi "lock -x\nsend\n";

my $dat = tlr_recv($fo);
while (my ($f,$d) = each %$dat) {
    file_update($tmdir.$f,$d->[TXT],$d->[MODE]) || die "$f: $!\n";
}

my $cwd = getcwd;
chdir($tmdir) || die "$tmdir; $!\n";
if (scalar(@ARGV)) {
    system(@ARGV);
} else {
    system('sh');
}
chdir($cwd) || die "/: $!\n";

#
# Detect/xmit changes...
#
print $fi "recv\n";
while (my ($f,$d) = each %$dat) {
    open(my $fh,'<',$tmdir.$f) || die "$f: $!\n";
    my $ntxt = '';
    while (<$fh>) {
	$ntxt .= $_;
    }
    close($fh);
    if ($ntxt ne $d->[TXT]) {
	print STDERR "Updating $f\n" if ($verbose);
	print $fi length($ntxt),' ',$f,"\n";
	print $fi $ntxt;
    }
}

close($fi);close($fo);

waitpid($pid,0);
warn("IPC: exited with status: ".($?>>8)."\n") if ($? >> 8);
